(function() {
  'use strict';
  describe('services', function() {
    var calendar, eventItem, storagePrefix;
    calendar = {};
    storagePrefix = 'tests';
    eventItem = {};
    beforeEach(module('scheduler'));
    beforeEach(inject(function(_calendar_) {
      calendar = _calendar_;
      return calendar.setStoragePrefix(storagePrefix);
    }));
    beforeEach(inject(function(_eventItem_) {
      return eventItem = _eventItem_;
    }));
    return describe('localStorage', function() {
      it('shold content tests storagePrefix.. just checking', function() {
        return expect((function() {
          var storageKey;
          storageKey = calendar.storageKey('1234567');
          return storageKey.substring(0, storagePrefix.length);
        })()).toBe(storagePrefix);
      });
      it('shold add and get data from storage', function() {
        return expect((function() {
          calendar.add('20151010', 'test');
          return calendar.get('20151010');
        })()).toContain('test');
      });
      it('shold remove data from storage', function() {
        return expect((function() {
          calendar.add('20151010', 'test');
          calendar.remove('20151010');
          return calendar.get('20151010');
        })()).toEqual([]);
      });
      it('shold add 2 new events to storage', function() {
        return expect((function() {
          var newEvent1, newEvent2;
          newEvent1 = new eventItem;
          newEvent1.startTimeId = 0;
          newEvent1.endTimeId = 5;
          newEvent1.name = 'test1';
          newEvent1.comment = 'coment';
          calendar.addEvent('20151010', newEvent1);
          newEvent2 = new eventItem;
          newEvent2.startTimeId = 7;
          newEvent2.endTimeId = 8;
          newEvent2.name = 'test2';
          newEvent2.comment = 'coment';
          calendar.addEvent('20151010', newEvent2);
          return calendar.get('20151010').length;
        })()).toBe(2);
      });
      it('shold be new id in added event', function() {
        return expect((function() {
          var events, newEvent1;
          newEvent1 = new eventItem;
          newEvent1.startTimeId = 0;
          newEvent1.endTimeId = 5;
          newEvent1.name = 'test3';
          newEvent1.comment = 'coment';
          calendar.addEvent('20151010', newEvent1);
          events = calendar.get('20151010');
          return events[events.length - 1].id;
        })()).toBeGreaterThan(0);
      });
      it('shold remove specified events from storage (exept last)', function() {
        return expect((function() {
          var events, i, j, newEvent1, newEvent2, newEventList, ref;
          newEvent1 = new eventItem;
          newEvent1.startTimeId = 0;
          newEvent1.endTimeId = 5;
          newEvent1.name = 'test4';
          newEvent1.comment = 'coment';
          calendar.addEvent('20151010', newEvent1);
          newEvent2 = new eventItem;
          newEvent2.startTimeId = 7;
          newEvent2.endTimeId = 8;
          newEvent2.name = 'test5';
          newEvent2.comment = 'coment';
          calendar.addEvent('20151010', newEvent2);
          events = calendar.get('20151010');
          for (i = j = 0, ref = events.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            calendar.removeEvent('20151010', events[i].id);
          }
          newEventList = calendar.get('20151010');
          return newEventList.length === 1 && newEventList[0].name === 'test5';
        })()).toBeTruthy();
      });
      return it('shold clean tests storage values', function() {
        return expect((function() {
          var newEvent1, newEvent2;
          newEvent1 = new eventItem;
          newEvent1.startTimeId = 0;
          newEvent1.endTimeId = 5;
          newEvent1.name = 'test';
          newEvent1.comment = 'coment';
          calendar.addEvent('20151010', newEvent1);
          newEvent2 = new eventItem;
          newEvent2.startTimeId = 7;
          newEvent2.endTimeId = 8;
          newEvent2.name = 'test';
          newEvent2.comment = 'coment';
          calendar.addEvent('20151010', newEvent2);
          calendar.reset();
          return calendar.get('20151010').length;
        })()).toBe(0);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,